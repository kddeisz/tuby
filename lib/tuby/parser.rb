#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Tuby
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 40)
  attr_reader :lexer, :iseq

  def parse(input)
    @iseq = InstructionSequence.new
    @lexer = Lexer.new(input)
    do_parse
  end

  def compile(input)
    @iseq = InstructionSequence.new
    @lexer = Lexer.new(input)

    iseq.scope = do_parse
    iseq
  end

  def self.parse(input)
    new.parse(input)
  end

  def self.compile(input)
    new.compile(input)
  end

  def next_token
    lexer.next_token
  end

  def n(type, *children)
    Node.const_get(type).new(lexer.lineno, *children)
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    19,    20,    17,    18,    12,     7,    31,     5,    23,     8,
     9,     7,    24,     5,    16,     8,     9,     7,   nil,     5,
   nil,     8,     9,     7,   nil,     5,   nil,     8,     9,     7,
   nil,     5,   nil,     8,     9,     7,   nil,     5,   nil,     8,
     9,     7,   nil,     5,   nil,     8,     9,     7,   nil,     5,
   nil,     8,     9,    19,    20,    17,    18,    19,    20,    17,
    18,    19,    20,    14,    15,    19,    20 ]

racc_action_check = [
    21,    21,    21,    21,     1,     0,    21,     0,     7,     0,
     0,     5,    12,     5,     3,     5,     5,    13,   nil,    13,
   nil,    13,    13,    16,   nil,    16,   nil,    16,    16,    17,
   nil,    17,   nil,    17,    17,    18,   nil,    18,   nil,    18,
    18,    19,   nil,    19,   nil,    19,    19,    20,   nil,    20,
   nil,    20,    20,    26,    26,    26,    26,     4,     4,     4,
     4,    27,    27,     2,     2,    28,    28 ]

racc_action_pointer = [
    -1,     4,    51,     7,    54,     5,   nil,    -2,   nil,   nil,
   nil,   nil,    12,    11,   nil,   nil,    17,    23,    29,    35,
    41,    -3,   nil,   nil,   nil,   nil,    50,    58,    62,   nil,
   nil,   nil ]

racc_action_default = [
   -15,   -20,    -1,    -9,   -17,   -20,    -8,   -20,   -11,   -12,
   -13,   -16,   -20,   -20,   -18,   -19,   -20,   -20,   -20,   -20,
   -20,   -20,    -9,   -10,    32,   -14,    -2,    -3,    -4,    -5,
    -6,    -7 ]

racc_goto_table = [
    21,     1,     2,     3,    10,    13,   nil,   nil,   nil,   nil,
   nil,    26,    27,    28,    29,    30,     3,    25 ]

racc_goto_check = [
     5,     1,     2,     4,     7,     8,   nil,   nil,   nil,   nil,
   nil,     5,     5,     5,     5,     5,     4,     7 ]

racc_goto_pointer = [
   nil,     1,     2,   nil,     3,    -5,   nil,     4,     3 ]

racc_goto_default = [
   nil,   nil,   nil,    11,    22,     4,     6,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 15, :_reduce_none,
  3, 17, :_reduce_2,
  3, 19, :_reduce_3,
  3, 19, :_reduce_4,
  3, 19, :_reduce_5,
  3, 19, :_reduce_6,
  3, 19, :_reduce_7,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  2, 20, :_reduce_10,
  1, 20, :_reduce_11,
  1, 18, :_reduce_12,
  1, 16, :_reduce_13,
  3, 16, :_reduce_14,
  0, 16, :_reduce_15,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none ]

racc_reduce_n = 20

racc_shift_n = 32

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  "=" => 7,
  "(" => 8,
  ")" => 9,
  :NUMBER => 10,
  :IDENT => 11,
  :NEWLINE => 12,
  ";" => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "NUMBER",
  "IDENT",
  "NEWLINE",
  "\";\"",
  "$start",
  "target",
  "scope",
  "assign",
  "identifier",
  "expr",
  "number",
  "statement",
  "stmt_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 9)
  def _reduce_2(val, _values, result)
     result = n(:Assign, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_3(val, _values, result)
     iseq.add_operator(:"+")
                                    result = n(:Binary, *val[0..2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_4(val, _values, result)
     iseq.add_operator(:"-")
                                    result = n(:Binary, *val[0..2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_5(val, _values, result)
     iseq.add_operator(:"*")
                                    result = n(:Binary, *val[0..2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_6(val, _values, result)
     iseq.add_operator(:"/")
                                    result = n(:Binary, *val[0..2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_7(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_10(val, _values, result)
     result = n(:Number, -val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_11(val, _values, result)
     result = n(:Number, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_12(val, _values, result)
     iseq.add_variable(val[0])
                                    result = n(:Ident, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_13(val, _values, result)
     result = n(:Scope, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_14(val, _values, result)
     val[0] << val[2]; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_15(val, _values, result)
     result = n(:Scope) 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Tuby
